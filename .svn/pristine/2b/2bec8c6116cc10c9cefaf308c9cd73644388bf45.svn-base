var messageDemo = new MessageDemo();//创建一个提示对象
function MessageDemo() {
	//删除的提示框
	this.messageBox = function(func) {
		if(typeof(func) != 'function') {
			return false;
		}
		var message = EUI.MessageBox({
			border: true,
			title: "提示框", //消息提示框的标题
			showClose: true, // 右上角关闭按钮是否显示
			msg: "确定要删除吗?", //提示框中的提示信息
			buttons: [{ //按钮组
				title: "确定",
				selected: true,
				handler: function() {
					message.remove();
					func(); //需要删除设置的操作
				}
			}, {
				title: "取消",
				handler: function() {
					message.remove();
				}
			}]
		});
	};
	//操作成功的提示
	this.messageSuccess = function(msg) {
		EUI.ProcessStatus({
			width: 260, //宽度
			height: 65, //高度
			msg: msg, //状态提示框框中的提示信息
			success: true, //状态是否成功
			showTime: 50 //显示提示时间
		});
	};
	//操作失败的提示
	this.messageError = function(msg) {
		EUI.ProcessStatus({
			msg: msg,
			success: false,
			showTime: 6
		});
	};

}

(function($)  
{  
    $.extend({  
        /** 
         * 数字千分位格式化 
         * @public 
         * @param mixed mVal 数值 
         * @param int iAccuracy 小数位精度(iAccuracy不传就为整数) 
         * @return string 
         */  
        formatMoney:function(mVal, iAccuracy){  
            var fTmp = 0.00;//临时变量  
            var iFra = 0;//小数部分  
            var iInt = 0;//整数部分  
            var aBuf = new Array(); //输出缓存  
            var bPositive = true; //保存正负值标记(true:正数)  
            /** 
             * 输出定长字符串，不够补0 
             * <li>闭包函数</li> 
             * @param int iVal 值 
             * @param int iLen 输出的长度 
             */  
            function funZero(iVal, iLen){  
                var sTmp = iVal.toString();  
                var sBuf = new Array();  
                for(var i=0,iLoop=iLen-sTmp.length; i<iLoop; i++)  
                    sBuf.push('0');  
                sBuf.push(sTmp);  
                return sBuf.join('');  
            };  
  
            if (typeof(iAccuracy) === 'undefined')
            {
            	iAccuracy = 0; 
            }
                 
            bPositive = (mVal >= 0);//取出正负号  
            fTmp = (isNaN(fTmp = parseFloat(mVal))) ? 0 : Math.abs(fTmp);//强制转换为绝对值数浮点  
            //所有内容用正数规则处理  
            iInt = parseInt(fTmp); //分离整数部分  
            iFra = parseInt((fTmp - iInt) * Math.pow(10,iAccuracy) + 0.5); //分离小数部分(四舍五入)  
  
            do{  
                aBuf.unshift(funZero(iInt % 1000, 3));  
            }while((iInt = parseInt(iInt/1000)));  
            aBuf[0] = parseInt(aBuf[0]).toString();//最高段区去掉前导0  
            return ((bPositive)?'':'-') + aBuf.join(',') + ((0 === iAccuracy)? '' : '.'+funZero(iFra, iAccuracy));  
        },  
        /** 
         * 将千分位格式的数字字符串转换为浮点数 
         * @public 
         * @param string sVal 数值字符串 
         * @return float 
         */  
        unformatMoney:function(sVal){  
            var fTmp = parseFloat(sVal.replace(/,/g, ''));  
            return (isNaN(fTmp) ? 0 : fTmp);  
        },  
    });  
})(jQuery);  

