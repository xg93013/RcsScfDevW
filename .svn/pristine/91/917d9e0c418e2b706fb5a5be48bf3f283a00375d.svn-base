package com.rcsit.scf.bsp.utils;


import com.alibaba.fastjson.JSONObject;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;

import java.io.*;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * DESC : HttpClientUtil 连接Util工具类
 *
 * @author : wangdayin
 * @version: v1.0.0
 */
public class HttpClientUtil {
    private final static int TIME_OUT = 90000;
    private final static int REQUEST_SOCKET_TIME = 60000;
    private final static Logger logger = LoggerFactory.getLogger(HttpClientUtil.class);

    private HttpClientUtil() {
    }

    public static HttpClient obtHttpClient() {
        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();
        RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(HttpClientUtil.TIME_OUT)
                .setSocketTimeout(HttpClientUtil.REQUEST_SOCKET_TIME).build();
        httpClientBuilder.setDefaultRequestConfig(requestConfig);
        return httpClientBuilder.build();
    }

    public static String httpGets(String url, String param) {
        StringBuilder sb = new StringBuilder(url).append("?");
        sb.append(param);
        HttpClient httpClient = obtHttpClient();
        HttpGet httpGets = new HttpGet(sb.toString());
        String value = null;
        try {
            HttpResponse response = httpClient.execute(httpGets);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream stream = entity.getContent();
                value = HttpClientUtil.convertStreamToString(stream);
                httpGets.abort();
            }
            return value;
        } catch (IOException e) {
            logger.error("请求失败url：" + url, e);
            throw new RuntimeException(e);
        }
    }

    public static String convertStreamToString(InputStream is) {
        StringBuilder sb = new StringBuilder();
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(is, "utf-8"));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }
        } catch (IOException e) {
            logger.error("convertStreamToString " + e);
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                logger.error("convertStreamToString exception" + e);
            }
        }
        return sb.toString();
    }

    /**
     * post请求，参数位json格式
     *
     * @param url
     * @param data
     * @return
     * @throws Exception
     */
    public static String httpJsonPost(String url, String data) throws Exception {
        HttpClient httpClient = obtHttpClient();
        HttpPost httpPost = new HttpPost(url);
        httpPost.setHeader("Content-Type", "application/json;charset=UTF-8");
        httpPost.setEntity(new StringEntity(data, ContentType.APPLICATION_JSON));
        HttpResponse response = httpClient.execute(httpPost);
        HttpEntity entity = response.getEntity();
        String value = EntityUtils.toString(entity, "utf-8");
        return value;
    }

    /**
     * post http请求
     *
     * @param url  请求url
     * @param data 参数json字符串
     */
    public static String httpKvPost(String url, String data) throws Exception {
        HttpClient httpClient = obtHttpClient();
        HttpPost httpPost = new HttpPost(url);
        Map<String, String> param = JacksonUtil.json2map(data);
        List<NameValuePair> nameValuePairs = commonParam(param);
        httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, "utf-8"));
        HttpResponse response = httpClient.execute(httpPost);
        HttpEntity entity = response.getEntity();
        String value = EntityUtils.toString(entity, "utf-8");
        return value;
    }

    /**
     * post http请求
     *
     * @param url  请求url
     * @param data 参数对象
     */
    public static String httpKvPost(String url, Object data) {
        HttpClient httpClient = obtHttpClient();
        HttpPost httpPost = new HttpPost(url);
        String json = JacksonUtil.obj2json(data);
        Map<String, String> param = JacksonUtil.json2map(json);
        List<NameValuePair> nameValuePairs = commonParam(param);
        try {
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, "utf-8"));
            HttpResponse response = httpClient.execute(httpPost);
            HttpEntity entity = response.getEntity();
            String value = EntityUtils.toString(entity, "utf-8");
            return value;
        } catch (Exception e) {
            logger.error("请求失败url：" + url, e);
            throw new RuntimeException(e);
        }
    }

    /**
     * post http请求
     *
     * @param url  请求url
     * @param data List<NameValuePair>
     */
    public static String httpPairsPost(String url, List<NameValuePair> data) throws Exception {
        HttpClient httpClient = obtHttpClient();
        HttpPost httpPost = new HttpPost(url);
        httpPost.setEntity(new UrlEncodedFormEntity(data,"utf-8"));
        HttpResponse response = httpClient.execute(httpPost);
        HttpEntity entity = response.getEntity();
        String value = EntityUtils.toString(entity, "utf-8");
        return value;
    }

    public static List<NameValuePair> commonParam(Object o) {
        String json = JacksonUtil.obj2json(o);
        Map<String, String> json2map = JacksonUtil.json2map(json);
        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
        for (Map.Entry<String, String> entry : json2map.entrySet()) {
            nameValuePairs.add(new BasicNameValuePair(entry.getKey(), String.valueOf(entry.getValue())));
        }
        return nameValuePairs;
    }

    public static List<NameValuePair> commonParam(Map<String, String> map) {
        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
        for (Map.Entry<String, String> entry : map.entrySet()) {
            nameValuePairs.add(new BasicNameValuePair(entry.getKey(), String.valueOf(entry.getValue())));
        }
        return nameValuePairs;
    }

    public static boolean isOk(JSONObject jsonObject){
        if (jsonObject.getInteger("status") == (HttpStatus.OK.value()))
            return  true;
        return false;
    }

}
